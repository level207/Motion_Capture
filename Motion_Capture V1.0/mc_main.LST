C51 COMPILER V9.00   MC_MAIN                                                               04/14/2014 23:39:57 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MC_MAIN
OBJECT MODULE PLACED IN mc_main.OBJ
COMPILER INVOKED BY: D:\Program Files\Keil C\C51\BIN\C51.EXE mc_main.c LARGE BROWSE DEBUG OBJECTEXTEND

line level    source

   1          /* 程序的入口函数 */
   2          
   3          #include <c8051f340.h>
   4          #include <stdio.h>
   5          #include "mc_common_define.h"
   6          #include "mc_init_8051.h"
   7          #include "mc_sensor.h"
   8          //#include "mc_algorithm.h"
   9          #include "test.h"
  10          
  11          uchar data_write[18] = {0};
  12          
  13          void main()
  14          {
  15   1              float init_ax, init_ay, init_az, init_gx, init_gy, init_gz, init_mx, init_my, init_mz;
  16   1          signed short int gyro[3] = {0}, accel[3] = {0}, mag[3] = {0};
  17   1              int i = 0;
  18   1      
  19   1              mc_init_watchdog();             /* 初始化配置看门狗 */
  20   1              mc_init_sysclk();               /* 初始化配置晶振 */
  21   1      
  22   1              mc_init_port();                 /* 初始化IO和交叉开关 */
  23   1              mc_init_uart0();                /* 初始化配置uart0 timer1*/
  24   1              delay_ms(200);
  25   1      
  26   1      
  27   1              mc_init_timer2();               /* 16位自动重载，用于每10ms向串口发送四元数 */
  28   1              //mc_init_timer3();             /* 16位自动重载，用于每1ms从IIC总线读取传感器的数据 */
  29   1      
  30   1              mc_init_sensor();               /* 初始化配置9轴传感器 */
  31   1              delay_ms(200);
  32   1              
  33   1          //init_quaternion();      /* 初始化四元数   */
  34   1      
  35   1              //EA = 1; /* 中断总开关 */
  36   1      
  37   1              while(1)                                /* 循环读出传感器的值，并处理 */
  38   1              {
  39   2                      multiple_read_smbus(0xA6, 0x32, data_write);                    //连续读出ADXL345数据，存储在BUF中
  40   2                      multiple_read_smbus(0xD0, 0x1D, &(data_write[6]));      //连续读出ITG3205数据，存储在BUF中
  41   2                      multiple_read_smbus(0x3C, 0x03, &(data_write[12]));     //连续读出HMC5883L数据，存储在BUF中
  42   2      
  43   2                  accel[0]=(signed short int)((data_write[1]<<8) | data_write[0]);//加速度计的合成注意顺序
  44   2                  accel[1]=(signed short int)((data_write[3]<<8) | data_write[2]);
  45   2                      accel[2]=(signed short int)((data_write[5]<<8) | data_write[4])   + Accel_Zout_Offset;
  46   2      
  47   2                      gyro[0] =(signed short int)((data_write[6]<<8) | data_write[7])   + Gyro_Xout_Offset;
  48   2                      gyro[1] =(signed short int)((data_write[8]<<8) | data_write[9])   + Gyro_Yout_Offset;
  49   2                      gyro[2] =(signed short int)((data_write[10]<<8) | data_write[11]) + Gyro_Zout_Offset;
  50   2      
  51   2                  mag[0]  =(signed short int)((data_write[12]<<8) | data_write[13]);
  52   2                  mag[1]  =(signed short int)((data_write[14]<<8) | data_write[15]);
  53   2                      mag[2]  =(signed short int)((data_write[16]<<8) | data_write[17]);
  54   2      
  55   2                      //单位转化成重力加速度的单位g：m/s2
C51 COMPILER V9.00   MC_MAIN                                                               04/14/2014 23:39:57 PAGE 2   

  56   2                      init_ax=(float)(accel[0] * 3.9 / 1000);    
  57   2                  init_ay=(float)(accel[1] * 3.9 / 1000);
  58   2              init_az=(float)(accel[2] * 3.9 / 1000);
  59   2      
  60   2                      //单位转化成：弧度/s，1/(14.375 * 57.3)
  61   2                      init_gx=(float)(gyro[0] / (14.375 * 57.3));    
  62   2                      init_gy=(float)(gyro[1] / (14.375 * 57.3));
  63   2                      init_gz=(float)(gyro[2] / (14.375 * 57.3));
  64   2      
  65   2              //进行x y轴的校准，未对z轴进行校准，参考ST的校准方法 
  66   2                      //磁场传感器为原始数据
  67   2              init_mx =(float)mag[0];                                         
  68   2              init_my =(float)mag[1];
  69   2              init_mz =(float)mag[2];
  70   2      
  71   2                       //SBUF0 = 'a';
  72   2                       //delay_5ms();
  73   2                      printf("ax=%f, ay=%f, az=%f\n", init_ax, init_ay, init_az);
  74   2                      //printf("gx=%f, gy=%f, gz=%f\n", init_gx, init_gy, init_gz);
  75   2                      //printf("mx=%f, my=%f, mz=%f\n", init_mx, init_my, init_mz);
  76   2      
  77   2      
  78   2                      //计算出欧拉角
  79   2              //Roll  = atan2(init_ay, init_az);
  80   2              //Pitch = -asin(init_ax);              //init_Pitch = asin(ax / 1);      
  81   2              //Yaw   = -atan2(init_mx*cos(Roll) + init_my*sin(Roll)*sin(Pitch) + init_mz*sin(Roll)*cos(Pitch),
  82   2              //               init_my*cos(Pitch) - init_mz*sin(Pitch));                       //atan2(mx, my);
  83   2                        
  84   2                      //printf("Yaw=%f, Pitch=%f, Roll=%f\n", Yaw, Pitch, Roll);
  85   2                      //printf("Yaw=%f, Pitch=%f, Roll=%f\n", Yaw*57.3, Pitch*57.3, Roll*57.3);
  86   2              
  87   2                      //四元数更新算法
  88   2              //AHRSupdate(init_gx, init_gy, init_gz, init_ax, init_ay, init_az, init_mx, init_my, init_mz);
  89   2      
  90   2                      //delay_ms(10);
  91   2                       
  92   2              }
  93   1      
  94   1              return;
  95   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    629    ----
   CONSTANT SIZE    =     39    ----
   XDATA SIZE       =     18      56
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
